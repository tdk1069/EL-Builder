<?php
// editor.php
session_start();
require 'auth/db.php';

if (!isset($_SESSION['username'])) {
    header('Location: login.html');
    exit;
}

$areaId = $_GET['id'] ?? '';
if (!$areaId) {
    die('No area specified.');
}

$pdo = require 'auth/db.php';
$stmt = $pdo->prepare("SELECT * FROM areas WHERE id = ? AND username = ?");
$stmt->execute([$areaId, $_SESSION['username']]);
$area = $stmt->fetch();

if (!$area) {
    die('Area not found or access denied.');
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Area Designer - <?= htmlspecialchars($area->name) ?></title>
  <link rel="stylesheet" href="style.css">
  <style>
    body {
      display: flex;
      font-family: sans-serif;
      background: #222;
      color: #eee;
      margin: 0;
    }
    #map-container {
      flex: 3;
      padding: 1rem;
      overflow: auto;
    }
    #map {
      display: grid;
      grid-template-columns: repeat(21, 40px);
      grid-template-rows: repeat(21, 40px);
      gap: 2px;
      position: relative;
    }
    .room {
      background: #444;
      border: 1px solid #888;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .current {
      background: gold;
      color: black;
      font-weight: bold;
    }
    .occupied {
      background: #286;
    }
    #controls {
      flex: 1;
      padding: 1rem;
      background: #333;
      border-left: 2px solid #555;
    }
    button {
      margin: 2px;
    }
    label {
      display: block;
      margin-top: 10px;
    }
    .compass {
      display: grid;
      grid-template-columns: repeat(3, 40px);
      grid-template-rows: repeat(3, 40px);
      gap: 2px;
      justify-content: center;
      align-items: center;
    }
    .compass button {
      width: 40px;
      height: 40px;
    }
    .form-group {
      margin-bottom: 10px;
    }
    .form-group input,
    .form-group textarea {
      width: 100%;
      box-sizing: border-box;
    }
    svg {
      position: absolute;
      top: 0;
      left: 0;
      pointer-events: none;
      z-index: 0;
    }
  </style>
</head>
<body>
  <div id="map-container">
    <div id="map"></div>
    <svg id="links"></svg>
  </div>
  <div id="controls">
    <h3>Editing: <?= htmlspecialchars($area->name) ?></h3>
    <div>
      <strong>Movement</strong>
      <div class="compass">
        <button onclick="move('nw')">NW</button>
        <button onclick="move('n')">N</button>
        <button onclick="move('ne')">NE</button>
        <button onclick="move('w')">W</button>
        <div></div>
        <button onclick="move('e')">E</button>
        <button onclick="move('sw')">SW</button>
        <button onclick="move('s')">S</button>
        <button onclick="move('se')">SE</button>
      </div>
      <div style="margin-top: 10px; text-align: center;">
        <button onclick="move('u')">Up</button>
        <button onclick="move('d')">Down</button>
      </div>
    </div>

    <div class="form-group">
      <label for="shortDesc">Short Description:</label>
      <input type="text" id="shortDesc">
    </div>

    <div class="form-group">
      <label for="longDesc">Long Description:</label>
      <textarea id="longDesc"></textarea>
    </div>

    <div class="form-group">
      <label for="smell">Smell:</label>
      <input type="text" id="smell">
    </div>

    <button onclick="saveRoom()">Save Room</button>
  </div>

  <script>
    const areaId = <?= json_encode($areaId) ?>;
    let currentPos = { x: 10, y: 10, z: 0 };
    const rooms = {};

    function posKey(x, y, z) {
      return `${x},${y},${z}`;
    }

    function drawMap() {
      const map = document.getElementById('map');
      const svg = document.getElementById('links');
      map.innerHTML = '';
      svg.innerHTML = '';

      for (let y = 0; y < 21; y++) {
        for (let x = 0; x < 21; x++) {
          const gx = x;
          const gy = y;
          const realX = gx - 10 + currentPos.x;
          const realY = gy - 10 + currentPos.y;
          const key = posKey(realX, realY, currentPos.z);
          const div = document.createElement('div');
          div.className = 'room';

          if (rooms[key]) {
            div.classList.add('occupied');
          }

          if (realX === currentPos.x && realY === currentPos.y) {
            div.classList.add('current');
          }

          div.style.gridColumn = x + 1;
          div.style.gridRow = y + 1;
          map.appendChild(div);
        }
      }

      Object.entries(rooms).forEach(([key, data]) => {
        const [x, y, z] = key.split(',').map(Number);
        if (z !== currentPos.z) return;
        const cx = (x - currentPos.x + 10) * 42 + 20;
        const cy = (y - currentPos.y + 10) * 42 + 20;
        for (const [dir, target] of Object.entries(data.exits || {})) {
          const [tx, ty, tz] = target;
          if (tz !== currentPos.z) continue;
          const tx2 = (tx - currentPos.x + 10) * 42 + 20;
          const ty2 = (ty - currentPos.y + 10) * 42 + 20;
          const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
          line.setAttribute("x1", cx);
          line.setAttribute("y1", cy);
          line.setAttribute("x2", tx2);
          line.setAttribute("y2", ty2);
          line.setAttribute("stroke", "#0ff");
          line.setAttribute("stroke-width", "2");
          svg.appendChild(line);
        }
      });
    }

    function move(dir) {
      const dx = { n: 0, s: 0, e: 1, w: -1, ne: 1, nw: -1, se: 1, sw: -1, u: 0, d: 0 }[dir] || 0;
      const dy = { n: -1, s: 1, e: 0, w: 0, ne: -1, nw: -1, se: 1, sw: 1, u: 0, d: 0 }[dir] || 0;
      const dz = { u: 1, d: -1 }[dir] || 0;
      const newX = currentPos.x + dx;
      const newY = currentPos.y + dy;
      const newZ = currentPos.z + dz;
      const fromKey = posKey(currentPos.x, currentPos.y, currentPos.z);
      const toKey = posKey(newX, newY, newZ);

      if (!rooms[toKey]) {
        rooms[toKey] = { exits: {} };
      }
      if (!rooms[fromKey]) {
        rooms[fromKey] = { exits: {} };
      }

      rooms[fromKey].exits[dir] = [newX, newY, newZ];
      currentPos = { x: newX, y: newY, z: newZ };
      drawMap();
    }

    function saveRoom() {
      const key = posKey(currentPos.x, currentPos.y, currentPos.z);
      if (!rooms[key]) rooms[key] = { exits: {} };
      rooms[key].short = document.getElementById('shortDesc').value;
      rooms[key].long = document.getElementById('longDesc').value;
      rooms[key].smell = document.getElementById('smell').value;
      drawMap();
    }

    drawMap();
  </script>
</body>
</html>
